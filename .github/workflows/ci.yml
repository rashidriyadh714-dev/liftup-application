name: CI & Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build (Maven)
    runs-on: ubuntu-latest
    outputs:
      jar_path: ${{ steps.locate_jar.outputs.jar_path }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: mvn -B -DskipTests package

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: liftup-jar
          path: target/*.jar

      - name: Locate JAR
        id: locate_jar
        run: |
          echo "jar=$(ls target/*.jar | head -n 1)"
          echo "::set-output name=jar_path::$(ls target/*.jar | head -n 1)"

  release:
    name: Create Release and Upload JAR
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build package
        run: mvn -B -DskipTests package

      - name: Locate JAR
        id: locate_jar
        run: echo "::set-output name=jar_path::$(ls target/*.jar | head -n 1)"

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: Automated release from GitHub Actions
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release asset (JAR)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.locate_jar.outputs.jar_path }}
          asset_name: ${{ github.repository }}-${{ github.ref_name }}.jar
          asset_content_type: application/java-archive

  publish:
    name: Publish to GitHub Packages (Maven)
    runs-on: ubuntu-latest
    needs: release
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Prepare settings.xml for GitHub Packages
        run: |
          cat > settings.xml <<'XML'
          <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd">
            <servers>
              <server>
                <id>github</id>
                <username>${env.GITHUB_ACTOR}</username>
                <password>${env.GITHUB_TOKEN}</password>
              </server>
            </servers>
          </settings>
          XML

      - name: Build and deploy to GitHub Packages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mvn -B -DskipTests -s settings.xml deploy \
            -DaltDeploymentRepository=github::default::https://maven.pkg.github.com/${{ github.repository }}

  package-macos:
    name: Package macOS (dmg)
    runs-on: macos-latest
    needs: release
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build package
        run: mvn -B -DskipTests package

      - name: Locate JAR
        run: echo "JAR_PATH=$(ls target/*.jar | head -n 1)" >> $GITHUB_ENV

      - name: Run jpackage (mac dmg)
        run: |
          mkdir -p out
          jpackage \
            --type dmg \
            --input target \
            --dest out \
            --name LiftUp \
            --main-jar "$(basename $JAR_PATH)" \
            --main-class com.liftup.Launcher || true

      - name: Create dmg output
        id: dmg_out
        run: |
          ASSET=$(ls out/* | head -n 1)
          echo "::set-output name=path::$ASSET"

      - name: Upload dmg to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ${{ steps.dmg_out.outputs.path }}
          asset_name: liftup-${{ github.ref_name }}-mac.dmg
          asset_content_type: application/octet-stream

  package-windows:
    name: Package Windows (msi)
    runs-on: windows-latest
    needs: release
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build package
        shell: bash
        run: mvn -B -DskipTests package

      - name: Locate JAR
        shell: bash
        run: echo "JAR_PATH=$(ls target/*.jar | head -n 1)" >> $GITHUB_ENV

      - name: Run jpackage (msi)
        shell: bash
        run: |
          mkdir -p out
          jpackage \
            --type msi \
            --input target \
            --dest out \
            --name LiftUp \
            --main-jar "$(basename $JAR_PATH)" \
            --main-class com.liftup.Launcher || true

      - name: Create msi output
        id: msi_out
        shell: bash
        run: |
          ASSET=$(ls out/* | head -n 1)
          echo "::set-output name=path::$ASSET"

      - name: Upload msi to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ${{ steps.msi_out.outputs.path }}
          asset_name: liftup-${{ github.ref_name }}-windows.msi
          asset_content_type: application/octet-stream

  package-linux:
    name: Package Linux (deb)
    runs-on: ubuntu-latest
    needs: release
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install jpackage dependencies
        run: sudo apt-get update && sudo apt-get install -y rpm dpkg

      - name: Build package
        run: mvn -B -DskipTests package

      - name: Locate JAR
        run: echo "JAR_PATH=$(ls target/*.jar | head -n 1)" >> $GITHUB_ENV

      - name: Run jpackage (deb)
        run: |
          mkdir -p out
          jpackage \
            --type deb \
            --input target \
            --dest out \
            --name LiftUp \
            --main-jar "$(basename $JAR_PATH)" \
            --main-class com.liftup.Launcher || true

      - name: Create deb output
        id: deb_out
        run: |
          ASSET=$(ls out/* | head -n 1)
          echo "::set-output name=path::$ASSET"

      - name: Upload deb to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ${{ steps.deb_out.outputs.path }}
          asset_name: liftup-${{ github.ref_name }}-linux.deb
          asset_content_type: application/octet-stream
